def reportName = "Local Web"
library 'local'
pipeline {
    agent { label 'test' }
        parameters {
        choice(name: 'Headless', choices: ['true', 'false'], description: '')
        string(name: 'TagName', defaultValue: '@smoke', description: '')
        choice(name: 'Browser', choices: ['chrome','remote-chrome','firefox'], description: '')
        string(name: 'Environment', defaultValue: 'qa', description: 'qa or test')
        string(name: 'ThreadCount', defaultValue: '1', description: '')
        string(name: 'Retry', defaultValue: '1', description: '')
            gitParameter name: 'BRANCH_TAG',
                        type: 'PT_BRANCH',
                        defaultValue: 'master',
                        selectedValue: 'DEFAULT',
                        quickFilterEnabled: true,
                        sortMode: 'DESCENDING_SMART',
                        tagFilter: '*',
                        branchFilter: 'origin/(.*)',
                        useRepository: '.*.git',
                        description: 'Select your branch'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                           branches: [[name: "${params.BRANCH_TAG}"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            gitTool: 'default',
                            submoduleCfg: [],
                            userRemoteConfigs: [[credentialsId:'qa-day-ruby-capybara',url: 'https://github.com/gokcesahinnn/web-test-automation-ruby-base-project.git']]
                        ])
            }
        }
        stage('Running Test') {
            steps {
             script {
                sh """
                       bundle exec parallel_cucumber -n ${params.ThreadCount.toInteger()} -o '-p parallel headless=${Headless} browser=${Browser} env=${params.Environment} jenkins_build_url=${env.JOB_URL}${BUILD_NUMBER} --retry ${params.Retry.toInteger()}' --group-by scenarios `cat ${replayedInfo.rerunFile}`
                       """
             }
            }
        }
    }
}